Neste capítulo vamos implementar de fato o metodo isValid() da classe UserUpdateValidator:


- Lembre-se que o PATH do update passamos o id do recurso que queremos atualizar;


- A classe ficou assim:

public class UserUpdateValidator implements ConstraintValidator<UserUpdateValid, UserUpdateDTO> {
	
	//Conseguimos pegar com este tudo que vem (parametros) numa requisicao 
	@Autowired
	private HttpServletRequest request;
	
	@Autowired
	private UserRepository repository;
	
	@Override
	public void initialize(UserUpdateValid ann) {
	}

	@Override
	public boolean isValid(UserUpdateDTO dto, ConstraintValidatorContext context) {
		
		//Pegando todos atributos que vem na URI da request
		var uriVars = (Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
		// Pegando agora o atributo com nome ID.
		Long userId = Long.parseLong(uriVars.get("id"));
		
		List<FieldMessage> list = new ArrayList<>();
		
		// Coloque aqui seus testes de validação, acrescentando objetos FieldMessage à lista
		User user = repository.findByEmail(dto.getEmail());
		if(user != null && userId != user.getId()) {
			list.add(new FieldMessage("email", "Email já existe"));
		}
		
		
		for (FieldMessage e : list) {
			context.disableDefaultConstraintViolation();
			context.buildConstraintViolationWithTemplate(e.getMessage()).addPropertyNode(e.getFieldName())
					.addConstraintViolation();
		}
		return list.isEmpty();
	}
}

- Veja que no if() agora verificamos o id, para saber se o e-mail já cadastrado de fato já é o da pessoa que ta fazendo a request, pois ela pode ta querendo
atualizar todos os seus dados menos o e-mail....

- Veja também que usamos o objeto do tipo HttpServletRequest para poder pegar os atributos vindo na requisição.